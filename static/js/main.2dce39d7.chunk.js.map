{"version":3,"sources":["utils/commons.js","utils/helpers.js","actions/actions.js","components/Card/Card.js","components/TemperatureScales/TemperatureScales.js","components/BarChart/BarChart.js","containers/Weather/Weather.js","App.js","reducer/reducer.js","index.js"],"names":["chartConfig","chart","type","title","text","subtitle","xAxis","categories","yAxis","min","tooltip","plotOptions","column","pointPadding","borderWidth","credits","enabled","tempConverter","temp","scale","Math","round","calculateAvgTempAndHumidityOfDays","data","reduce","accum","item","date","dt_txt","split","includes","uniqDates","map","compiledDayData","temperatureSum","main","humiditySum","humidity","count","avgTemp","avgHumidity","splitDateAndTime","getFirstDay","calculateChartsData","selectedDate","dateItem","splittedDate","series","URL","Card","props","temperature","handleCardClick","isSelected","className","onClick","hoverable","prototype","PropTypes","string","isRequired","func","bool","TemperatureScales","currentScale","setCurrentScale","Group","onChange","e","target","value","BarChart","chartData","convertedSeriest","config","name","defaultProps","connect","state","stopFetching","dispatch","startFetching","fetchData","Promise","resolve","reject","fetch","then","response","json","payload","catch","useState","pageIndex","setPageIndex","setSelectedDate","setChartData","useEffect","a","async","isFetching","list","dataAverages","size","tip","shape","length","index","key","App","defaultState","reducer","action","ReactDOM","render","store","createStore","applyMiddleware","thunk","document","getElementById"],"mappings":"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","file":"static/js/main.2dce39d7.chunk.js","sourcesContent":["export const SUCCESSFUL = \"fetch_successful\";\r\nexport const UNSUCCESSFUL = \"fetch_unsuccessful\";\r\nexport const chartConfig = {\r\n  chart: {\r\n    type: \"column\"\r\n  },\r\n  title: {\r\n    text: \"\"\r\n  },\r\n  subtitle: {\r\n    text: \"\"\r\n  },\r\n  xAxis: {\r\n    categories: []\r\n    // categories: [\"Jan\", \"Feb\", \"Mar\"]\r\n  },\r\n  yAxis: {\r\n    min: 0,\r\n    title: {\r\n      text: \"Temperature\"\r\n    }\r\n  },\r\n  tooltip: {\r\n    // headerFormat: '<span style=\"font-size:10px\">{point.key}</span><table>',\r\n    // pointFormat:\r\n    //   '<tr><td style=\"color:{series.color};padding:0\">{series.name}: </td>' +\r\n    //   '<td style=\"padding:0\"><b>{point.y:.1f} mm</b></td></tr>',\r\n    // footerFormat: \"</table>\",\r\n    // shared: true,\r\n    // useHTML: true\r\n  },\r\n  plotOptions: {\r\n    column: {\r\n      pointPadding: 0.2,\r\n      borderWidth: 0\r\n    }\r\n  },\r\n//   series: [\r\n//     {\r\n//       name: \"DATE----\",\r\n//       data: [49.9, 71.5, 106.4]\r\n//     }\r\n//   ],\r\n  credits: { enabled: false }\r\n};\r\n","export const convertToFahrenheit = celsius => {\r\n  return (celsius * 9) / 5 + 32;\r\n};\r\nexport const tempConverter = (temp, scale) => {\r\n  if (scale === \"C\") {\r\n    return Math.round(temp * 100) / 100;\r\n  }\r\n  return Math.round(convertToFahrenheit(temp) * 100) / 100;\r\n};\r\n\r\nexport const uniqDates = data =>\r\n  data.reduce((accum, item) => {\r\n    const date = item.dt_txt.split(\" \")[0];\r\n    if (!accum.includes(date)) {\r\n      return [...accum, date];\r\n    }\r\n    return [...accum];\r\n  }, []);\r\nexport const calculateAvgTempAndHumidityOfDays = data => {\r\n  const uniqueDates = uniqDates(data);\r\n  const avgTemps = uniqueDates.map(date => {\r\n    const compiledDayData = data.reduce(\r\n      (accum, item) => {\r\n        if (item.dt_txt.split(\" \")[0] === date) {\r\n          // assuming that avg of 5 days will be calculated from temp of each day and not by avg single day then avg all days\r\n          return {\r\n            temperatureSum: accum.temperatureSum + item.main.temp,\r\n            humiditySum: accum.humiditySum + item.main.humidity,\r\n            count: accum.count + 1\r\n          };\r\n        }\r\n        return {\r\n          temperatureSum: accum.temperatureSum,\r\n          humiditySum: accum.humiditySum,\r\n          count: accum.count\r\n        };\r\n      },\r\n      { temperatureSum: 0, humiditySum: 0, count: 0 }\r\n    );\r\n    return {\r\n      date: date,\r\n      avgTemp: compiledDayData.temperatureSum / compiledDayData.count,\r\n      avgHumidity:\r\n        Math.round(\r\n          (compiledDayData.humiditySum / compiledDayData.count) * 100\r\n        ) / 100\r\n    };\r\n  });\r\n  return avgTemps;\r\n};\r\n\r\nconst splitDateAndTime = date => {\r\n  return date.dt_txt.split(\" \");\r\n};\r\nexport const getFirstDay = data => {\r\n  return splitDateAndTime(data[0])[0];\r\n};\r\nexport const calculateChartsData = (selectedDate, data) => {\r\n  // categories for the chart\r\n  // ***********************************\r\n  // * ['00:00', '03:00', '06:00', ..] *\r\n  // ***********************************\r\n  //\r\n  // series for the chart\r\n  // ******************************************\r\n  // * {name: '', data: [49.9, 71.5, 106.4] } *\r\n  // ******************************************\r\n  return data.reduce(\r\n    (accum, dateItem) => {\r\n      const splittedDate = splitDateAndTime(dateItem);\r\n      if (splittedDate[0] === selectedDate) {\r\n        return {\r\n          categories: [...accum.categories, splittedDate[1]],\r\n          series: [...accum.series, dateItem.main.temp]\r\n        };\r\n      }\r\n      return {\r\n        ...accum\r\n      };\r\n    },\r\n    { categories: [], series: [] }\r\n  );\r\n};\r\n","// src\r\nimport { SUCCESSFUL, UNSUCCESSFUL } from \"../utils\";\r\n\r\nexport const START_FETCHING = \"start_fetching\";\r\nexport const STOP_FETCHING = \"stop_fetching\";\r\nexport const FETCH_DATA = \"fetch_data\";\r\n\r\n// Thanks for the key\r\nconst API_KEY = \"75f972b80e26f14fe6c920aa6a85ad57\";\r\nconst URL = `http://api.openweathermap.org/data/2.5/forecast?q=Munich,de&APPID=${API_KEY}&cnt=40&units=metric`;\r\n\r\nexport const startFetching = () => dispatch => {\r\n  dispatch({\r\n    type: START_FETCHING\r\n  });\r\n};\r\nexport const stopFetching = () => dispatch => {\r\n  dispatch({\r\n    type: STOP_FETCHING\r\n  });\r\n};\r\nexport const fetchData = () => dispatch => {\r\n  // Fetch Logic\r\n  return new Promise((resolve, reject) => {\r\n    fetch(URL)\r\n      .then(response => response.json())\r\n      .then(response => {\r\n        dispatch({\r\n          type: FETCH_DATA,\r\n          payload: response\r\n        });\r\n        resolve(SUCCESSFUL);\r\n      })\r\n      .catch(e => {\r\n        reject(UNSUCCESSFUL);\r\n      });\r\n  });\r\n};\r\n","// lib\r\nimport React from \"react\";\r\nimport PropTypes from \"prop-types\";\r\n// Smart imports reduces the build size, instead of building the whole\r\n// library it builds with only specific components\r\nimport AntDCard from \"antd/lib/card\";\r\n\r\n// src\r\nimport \"./Card.scss\";\r\n\r\nconst Card = props => {\r\n  const { temperature, date, humidity, handleCardClick, isSelected } = props;\r\n  return (\r\n    <div\r\n      className={`cardWrapper ${isSelected === true ? \"selected\" : \"\"}`}\r\n      onClick={() => {\r\n        handleCardClick(date);\r\n      }}\r\n    >\r\n      <AntDCard hoverable>\r\n        <div>\r\n          <span className=\"bold-text\">Temp: </span>\r\n          <span>{temperature}</span>\r\n        </div>\r\n        <div>\r\n          <span className=\"bold-text\">Date: </span>\r\n          <span>{date}</span>\r\n        </div>\r\n        <div>\r\n          <span className=\"bold-text\">humidity: </span>\r\n          <span>{humidity}</span>\r\n        </div>\r\n      </AntDCard>\r\n    </div>\r\n  );\r\n};\r\n\r\nCard.prototype = {\r\n  temperature: PropTypes.string.isRequired,\r\n  date: PropTypes.string.isRequired,\r\n  humidity: PropTypes.string.isRequired,\r\n  handleCardClick: PropTypes.func.isRequired,\r\n  isSelected: PropTypes.bool.isRequired\r\n};\r\nexport default Card;\r\n","// lib\r\nimport React from \"react\";\r\nimport PropTypes from \"prop-types\";\r\nimport Radio from \"antd/lib/radio\";\r\n\r\nconst TemperatureScales = props => {\r\n  const { currentScale, setCurrentScale } = props;\r\n  return (\r\n    <div className=\"temperature-scale\">\r\n      <Radio.Group\r\n        onChange={e => {\r\n          setCurrentScale(e.target.value);\r\n        }}\r\n        value={currentScale}\r\n      >\r\n        <Radio value={\"C\"}>Celsius</Radio>\r\n        <Radio value={\"F\"}>Fahrenheit</Radio>\r\n      </Radio.Group>\r\n    </div>\r\n  );\r\n};\r\n\r\nTemperatureScales.prototype = {\r\n  currentScale: PropTypes.string.isRequired,\r\n  setCurrentScale: PropTypes.func.isRequired\r\n};\r\n\r\nexport default TemperatureScales;\r\n","// lib\r\nimport React from \"react\";\r\nimport PropTypes from \"prop-types\";\r\nimport ReactHighCharts from \"react-highcharts\";\r\n\r\n// src\r\nimport { chartConfig, tempConverter } from \"../../utils\";\r\n\r\nconst BarChart = props => {\r\n  const { chartData, date, scale } = props;\r\n\r\n  const convertedSeriest = chartData.series.map(item => {\r\n    return tempConverter(item, scale);\r\n  });\r\n  const config = {\r\n    ...chartConfig,\r\n    series: [{ name: date, data: convertedSeriest }],\r\n    xAxis: {\r\n      categories: chartData.categories\r\n    },\r\n    yAxis: {\r\n      ...chartConfig.yAxis,\r\n      title: {\r\n        text: `Temperature(${scale})`\r\n      }\r\n    }\r\n  };\r\n  return <ReactHighCharts config={config} />;\r\n};\r\n\r\nBarChart.defaultProps = {\r\n  date: \"\"\r\n};\r\n\r\nBarChart.propTypes = {\r\n  // chartData: PropTypes.obj\r\n  scale: PropTypes.string.isRequired,\r\n  date: PropTypes.string\r\n};\r\n\r\nexport default BarChart;\r\n","// lib\r\nimport React, { useEffect, useState } from \"react\";\r\nimport { connect } from \"react-redux\";\r\nimport Button from \"antd/lib/button\";\r\nimport Icon from \"antd/lib/icon\";\r\nimport Spin from \"antd/lib/spin\";\r\n\r\n// src\r\nimport { startFetching, stopFetching, fetchData } from \"../../actions\";\r\nimport {\r\n  SUCCESSFUL,\r\n  tempConverter,\r\n  calculateAvgTempAndHumidityOfDays,\r\n  calculateChartsData,\r\n  getFirstDay\r\n} from \"../../utils\";\r\nimport Card from \"../../components/Card\";\r\nimport \"./Weather.scss\";\r\nimport TemperatureScales from \"../../components/TemperatureScales\";\r\nimport BarChart from \"../../components/BarChart\";\r\n\r\nconst Weather = props => {\r\n  // STATEFUL Logic\r\n  const [currentScale, setCurrentScale] = useState(\"C\");\r\n  const [pageIndex, setPageIndex] = useState(0);\r\n  const [selectedDate, setSelectedDate] = useState(null);\r\n  const [chartData, setChartData] = useState(null);\r\n\r\n  useEffect(() => {\r\n    props.startFetching();\r\n    const fetchAsychWrapper = async () => {\r\n      const fetch_status = await props.fetchData();\r\n      if (fetch_status === SUCCESSFUL) {\r\n        props.stopFetching();\r\n      } else {\r\n        props.stopFetching();\r\n      }\r\n    };\r\n    fetchAsychWrapper();\r\n    return () => {};\r\n  }, []);\r\n\r\n  // Calculation Logic\r\n  const { isFetching, data } = props;\r\n  const { list } = data;\r\n\r\n  let dataAverages = [];\r\n\r\n  \r\n  if (list) {\r\n    dataAverages = calculateAvgTempAndHumidityOfDays(list);\r\n    if (!chartData) {\r\n      setSelectedDate(getFirstDay(list));\r\n      setChartData(calculateChartsData(getFirstDay(list), list));\r\n    }\r\n  }\r\n  const handleCardClick = date => {\r\n    if (date !== selectedDate) {\r\n      setChartData(calculateChartsData(date, list));\r\n      setSelectedDate(date);\r\n    }\r\n  };\r\n\r\n  return (\r\n    <div>\r\n      {isFetching && (\r\n        <div className=\"loading-screen\">\r\n          <Spin size=\"large\" tip=\"Loading Weather Data...\" />\r\n        </div>\r\n      )}\r\n      {!isFetching && (\r\n        <div className=\"content-container\">\r\n          <TemperatureScales\r\n            currentScale={currentScale}\r\n            setCurrentScale={setCurrentScale}\r\n          />\r\n          <div className=\"buttons-container\">\r\n            <div>\r\n              {pageIndex > 0 && (\r\n                <Button\r\n                  onClick={() => {\r\n                    setPageIndex(pageIndex - 1);\r\n                  }}\r\n                  type=\"primary\"\r\n                  shape=\"circle\"\r\n                >\r\n                  <Icon type=\"arrow-left\" />\r\n                </Button>\r\n              )}\r\n            </div>\r\n            {dataAverages.length - pageIndex > 3 && (\r\n              <div>\r\n                <Button\r\n                  onClick={() => {\r\n                    setPageIndex(pageIndex + 1);\r\n                  }}\r\n                  type=\"primary\"\r\n                  shape=\"circle\"\r\n                >\r\n                  <Icon type=\"arrow-right\" />\r\n                </Button>\r\n              </div>\r\n            )}\r\n          </div>\r\n          <div className=\"temp-cards\">\r\n            {dataAverages.map((item, index) => {\r\n              if (index >= pageIndex && index < pageIndex + 3) {\r\n                return (\r\n                  <Card\r\n                    key={item.date}\r\n                    temperature={`${tempConverter(\r\n                      item.avgTemp,\r\n                      currentScale\r\n                    )}${currentScale}`}\r\n                    humidity={item.avgHumidity}\r\n                    date={item.date}\r\n                    handleCardClick={handleCardClick}\r\n                    isSelected={selectedDate===item.date}\r\n                  />\r\n                );\r\n              }\r\n            })}\r\n          </div>\r\n          {chartData && <BarChart chartData={chartData} date={selectedDate} scale={currentScale} />}\r\n        </div>\r\n      )}\r\n    </div>\r\n  );\r\n};\r\n\r\nconst mapStateToProps = state => {\r\n  return {\r\n    ...state\r\n  };\r\n};\r\n\r\nexport default connect(mapStateToProps, {\r\n  stopFetching,\r\n  startFetching,\r\n  fetchData\r\n})(Weather);\r\n","import React from 'react';\nimport 'antd/dist/antd.css';\n\n// src\nimport Weather from './containers/Weather';\n\nfunction App() {\n  return (\n    <div className=\"App\">\n      <Weather />\n    </div>\n  );\n}\n\nexport default App;\n","import { STOP_FETCHING, START_FETCHING, FETCH_DATA } from \"../actions\";\r\n\r\n// this is for initial load when we dont have any state\r\nconst defaultState = {\r\n  isFetching: false,\r\n  data: {}\r\n};\r\n\r\nconst reducer = (state = defaultState, action) => {\r\n  switch (action.type) {\r\n    case START_FETCHING:\r\n      return {\r\n        ...state,\r\n        isFetching: true\r\n      };\r\n    case FETCH_DATA:\r\n      return {\r\n        ...state,\r\n        data: action.payload\r\n      };\r\n    case STOP_FETCHING:\r\n      return {\r\n        ...state,\r\n        isFetching: false\r\n      };\r\n    default:\r\n      return state;\r\n  }\r\n};\r\n\r\nexport default reducer;\r\n","// lib\nimport React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport { createStore, applyMiddleware } from 'redux';\nimport thunk from 'redux-thunk';\nimport { Provider } from 'react-redux'\n\n// src\nimport App from \"./App\";\nimport reducer from './reducer';\n\n// We can extract the store configuration into a separate file but for our simple case I am creating it here \nfunction configureStore() {\n  return createStore(\n   reducer,\n    applyMiddleware(thunk)\n  );\n }\n\n\nReactDOM.render(\n  <Provider store={configureStore()}>\n    <App />\n  </Provider>,\n  document.getElementById(\"root\")\n);\n"],"sourceRoot":""}